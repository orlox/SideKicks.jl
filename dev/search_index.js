var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SideKicks","category":"page"},{"location":"#SideKicks","page":"Home","title":"SideKicks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SideKicks, a Julia package for analyzing the observed properties of stellar binaries containing a compact object, in order to perform parameter inference on the supernova mass loss and natal kick. ","category":"page"},{"location":"#Package-features","page":"Home","title":"Package features","text":"","category":"section"},{"location":"##-TODO-RTW","page":"Home","title":"# TODO - RTW","text":"","category":"section"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SideKicks]","category":"page"},{"location":"#SideKicks.SideKicks","page":"Home","title":"SideKicks.SideKicks","text":"Main module for SideKicks.jl – a analysis package for performing parameter inference on compact object stellar binaries.\n\n\n\n\n\n","category":"module"},{"location":"#SideKicks.KickMCMC","page":"Home","title":"SideKicks.KickMCMC","text":"mutable struct KickMCMC\n\nKickMCMC contains the MCMC model and Observations structs, the Results dict, the chains that resulted from the MCMC, and the parameters that went into the sampler.\n\n\n\n\n\n","category":"type"},{"location":"#SideKicks.ModVonMises","page":"Home","title":"SideKicks.ModVonMises","text":"struct ModVonMises{T1<:Real, T2<:Real} <: ContinuousUnivariateDistribution\n\nThis is just a wrapper on top of the VonMises distribution (as defined in Distributions.jl) to extend its domain. This is because the domain of VonMises is defined to be [μ-π, μ+π], and the angles we are concerned with range from [0,2π]\n\n\n\n\n\n","category":"type"},{"location":"#SideKicks.Observations","page":"Home","title":"SideKicks.Observations","text":"mutable struct Observations\n\nObservations contains the symbols, values, errors, and units of each observed parameter.\n\n\n\n\n\n","category":"type"},{"location":"#SideKicks.Priors","page":"Home","title":"SideKicks.Priors","text":"mutable struct Priors\n\nPriors contains the prior distribution of each of the desired parameters\n\nRTW: check that N and E are identical to RA and Dec...\n\n\n\n\n\n","category":"type"},{"location":"#SideKicks.WrappedCauchy","page":"Home","title":"SideKicks.WrappedCauchy","text":"struct WrappedCauchy{T1<:Real, T2<:Real} <: ContinuousUnivariateDistribution\n\nThe WrappedCauchy distribution resembles the Cauchy distribution defined on the unit  circle from 0 to 2π, with the endpoints wrapped back to each other.\n\n\n\n\n\n","category":"type"},{"location":"#SideKicks.RV_semiamplitude_K1-Tuple{}","page":"Home","title":"SideKicks.RV_semiamplitude_K1","text":"RV_semiamplitude_K1(;m1, m2, P, e, i)\n\nCompute the amplitude of radial velocity variations given orbital parameters and masses\n\nArguments:\n\nm1:   mass of observed star             [g]\nm2:   mass of companion                 [g]\nP:    orbital period                    [s]\ne:    orbital eccentricity              [-]\ni:    orbital inclination               [rad]\n\nOutput:\n\nK1: amplitude of radial velocity variation of star 1  [cm/s]\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.arbitraryEjectaBH-Tuple{Any, Any}","page":"Home","title":"SideKicks.arbitraryEjectaBH","text":"arbitraryEjectaBH(m2_i, frac)\n\n#TODO Description\n\nArguments:\n\n#TODO\n\nm2_i:\nfrac:\n\nOutput:\n\n#TODO\n\n\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.create_1D_density-NTuple{6, Any}","page":"Home","title":"SideKicks.create_1D_density","text":"create_1D_density(axis, values, range, chain_weights, fraction_1D, nbins; color, linewidth)\n\nDescription Make the 1D density plots given the parameter values, ranges, and weights.\n\nArguments:\n\naxis:           the axis to make the plot\nvalues:         the values for the x-coordinate        \nrange:          the ranges for the x-coordinate        \nchain_weights:  the sample weighting from the MCMC\nfraction_1D:    the fractional area from which to compute the confidence intervals\nnbins:          number of bins, identical for all parameters   \ncolor:          the color of the density curve\nlinewidth:      the linewidth of the density curve\n\nOutput:\n\nx:              the x-coordinates of the density plot\nh:              the heights of the density plot\ny:              the normalized heights of the density plot\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.create_2D_density-NTuple{7, Any}","page":"Home","title":"SideKicks.create_2D_density","text":"create_2D_density(axis, values1, ranges1, values2, ranges2, chain_weights, fractions, nbins)\n\nDescription Make the 2D density plots given the parameter values, ranges, and weights.\n\nArguments:\n\naxis:           the axis to make the plot\nvalues1:        the values for the x-coordinate        \nranges1:        the ranges for the x-coordinate        \nvalues2:        the values for the y-coordinate        \nranges2:        the ranges for the y-coordinate        \nchain_weights:  the sample weighting from the MCMC\nnbins:          number of bins, identical for all parameters   \n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.create_compound_1D_densities-NTuple{6, Any}","page":"Home","title":"SideKicks.create_compound_1D_densities","text":"create_compound_1D_densities(axis, values_matrix, range, chain_weights_matrix, fraction_1D, nbins)\n\n#TODO Description\n\nArguments:\n\naxis:                      \nvalues_matrix:                      \nrange:                      \nchainweightsmatrix:                      \nfraction_1D:                      \nnbins:                      \naxis:           the axis to make the plot\nvalues:         the values for the x-coordinate        \nrange:          the ranges for the x-coordinate        \nchain_weights:  the sample weighting from the MCMC\nfraction_1D:    the fractional area from which to compute the confidence intervals\nnbins:          number of bins, identical for all parameters   \ncolor:          the color of the density curve\nlinewidth:      the linewidth of the density curve\n\n#TODO\n\nvalues:\nrange:\nchain_weights:\nfraction_1D:\naxis:\nnbins:\n\nOutput:\n\n#TODO\n\n\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.create_general_mcmc_model-Tuple{}","page":"Home","title":"SideKicks.create_general_mcmc_model","text":"create_general_mcmc_model(observations, observed_values, observed_errors)\n\nCreate a Turing model to perform an MCMC sampling of the pre-explosion  and kick properties of a system, assuming pre-explosion eccentricity.\n\nRTW does acos just work? Do I need to worry about domain/range issues?\n\nCheck velocities, the conversions are a bit funky\n\nArguments:\n\nobservations:    the parameters taken from observations [Vector{Symbol}]\nobserved_values: the values of the parameters           [Vector{Float64}] \nobserved_errors: the errors of the observations         [Vector{Float64}]\n\nOutput:\n\nkickmodel: A Turing model for sampling\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.create_simplified_mcmc_model-Tuple{}","page":"Home","title":"SideKicks.create_simplified_mcmc_model","text":"create_simplified_mcmc_model(observations, observed_values, observed_errors)\n\nDescription Create a Turing model to perform an MCMC sampling of the pre-explosion  and kick properties of a system, assuming pre-explosion circularity.\n\nRTW this is more simplistic than just using a circular model, it's also assuming you know the eccentricity and don't care about radial velocity etc.\n\nArguments:\n\nobservations:    the parameters taken from observations [Vector{Symbol}]\nobserved_values: the values of the parameters           [Vector{Float64}] \nobserved_errors: the errors of the observations         [Vector{Float64}]\n\nOutput:\n\nkickmodel: A Turing model for sampling\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.get_bounds_for_fractions-Tuple{Any, Any}","page":"Home","title":"SideKicks.get_bounds_for_fractions","text":"get_bounds_for_fractions(h, fractions)\n\nDescription Calculate the bounds containing the specified fraction(s) of area.\n\nArguments:\n\nh:         the densities contained in the bins\nfractions: the fractional area that should be bounded\n\nOutput:\n\nbounds:    the limits of the bounding area\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.kepler_P_from_a-Tuple{}","page":"Home","title":"SideKicks.kepler_P_from_a","text":"kepler_P_from_a(;m1, m2, a)\n\nObtain period from semimajor axis using Kepler's third law\n\nArguments:\n\nm1: mass of first companion      [g]\nm2: mass of 2nd companion        [g]\na:  semi-major axis of the orbit [cm]\n\nOutput:\n\nP: the orbital period            [s]\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.kepler_a_from_P-Tuple{}","page":"Home","title":"SideKicks.kepler_a_from_P","text":"kepler_a_from_P(;m1, m2, P)\n\nObtain semimajor axis from period using Kepler's third law\n\nArguments:\n\nm1: mass of first companion [g]\nm2: mass of 2nd companion   [g]\nP:  orbital period          [s]\n\nOutput:\n\na: semi-major axis of the orbit [cm]\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.post_supernova_circular_orbit_P-Tuple{}","page":"Home","title":"SideKicks.post_supernova_circular_orbit_P","text":"post_supernova_circular_orbit_P(;m1, m2, P, m1_f=-1, m2_f, vkick=0, θ=0, ϕ=0, vimp=0)\n\nSame as post_supernova_circular_orbit_a, except that it receives the initial orbital period as input and returns the final orbital period and eccentricity.\n\nArguments:\n\nm1:  pre-explosion  mass of non-exploding component   [g]           \nm2:  pre-explosion  mass of exploding component       [g]       \nP:   pre-explosion orbital period                     [d]\nm1_f:  post-explosion mass of non-exploding component [g]           \nm2_f:  post-explosion mass of exploding component     [g]   \nvkick: kick velocity                                  [cm/s] \nθ:     polar kick angle (away from e_par)             [rad]\nϕ:     azimuthal kick angle (off of e_perp)           [rad]\nvimp:  imparted kick velocity on companion            [cm/s]     \n\nOutput:\n\nP_f: post-explosion orbital period                    [d]\ne_f: post-explosion excentricity                      [-]\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.post_supernova_circular_orbit_a-Tuple{}","page":"Home","title":"SideKicks.post_supernova_circular_orbit_a","text":"post_supernova_circular_orbit_a(;m1, m2, a, m1_f=-1, m2_f, vkick=0, θ=0, ϕ=0, vimp=0)\n\nCompute post-kick properties for a circular pre-explosion orbit. Equivalent to Tauris et al. (1999): Monthly Notices of the Royal Astronomical Society, Volume 310, Issue 4, pp. 1165-1169.\n\nArguments:\n\nm1:  pre-explosion  mass of non-exploding component   [g]           \nm2:  pre-explosion  mass of exploding component       [g]       \na:   pre-explosion orbital separation                 [cm]\nm1_f:  post-explosion mass of non-exploding component [g]           \nm2_f:  post-explosion mass of exploding component     [g]   \nvkick: kick velocity                                  [cm/s] \nθ:     polar kick angle (away from e_par)             [rad]\nϕ:     azimuthal kick angle (off of e_perp)           [rad]\nvimp:  imparted kick velocity on companion            [cm/s]     \n\nOutput:\n\na_f: post-explosion orbital separation                [cm]\ne_f: post-explosion excentricity                      [-]\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.post_supernova_circular_orbit_vsys-Tuple{}","page":"Home","title":"SideKicks.post_supernova_circular_orbit_vsys","text":"post_supernova_circular_orbit_vsys(;m1, m2, a, m1_f=-1, m2_f, vkick=0, θ=0, ϕ=0, vimp=0)\n\nCompute post-kick properties for a circular pre-explosion orbit using equations from Tauris & Takens (1999)\n\nArguments:\n\nm1:  pre-explosion  mass of non-exploding component   [g]           \nm2:  pre-explosion  mass of exploding component       [g]       \na:   pre-explosion orbital separation                 [cm]\nm1_f:  post-explosion mass of non-exploding component [g]           \nm2_f:  post-explosion mass of exploding component     [g]   \nvkick: kick velocity                                  [cm/s] \nθ:     polar kick angle (away from e_par)             [rad]\nϕ:     azimuthal kick angle (off of e_perp)           [rad]\nvimp:  imparted kick velocity on companion            [cm/s]     \n\nOutput:\n\nvsys_f: post-explosion systemic velocity              [cm/s]\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.post_supernova_general_orbit_parameters-Tuple{}","page":"Home","title":"SideKicks.post_supernova_general_orbit_parameters","text":"post_supernova_general_orbit_parameters(;m1, m2, a, e=0, m1_f=-1, m2_f, vkick=0, θ=0, ϕ=0, vimp=0,\n    ν=0, Ω=0, ω=0, i=0)\n\nCompute post-kick properties for a general pre-explosion orbit  using equations from [Marchant, Willcox, Vigna-Gomez] TODO\n\nArguments:\n\nm1:  pre-explosion  mass of non-exploding component    [g]           \nm2:  pre-explosion  mass of exploding component        [g]       \na:   pre-explosion orbital separation                  [cm]\ne:   pre-explosion orbital eccentricity                [-]\nm1_f:  post-explosion mass of non-exploding component  [g]           \nm2_f:  post-explosion mass of exploding component      [g]   \n\nvkick: kick velocity                                   [cm/s] \nθ:     polar kick angle (away from e_par)              [rad]\nϕ:     azimuthal kick angle (off of e_perp)            [rad]\nvimp:  imparted kick velocity on companion             [cm/s]     \nInitial orbital orientation angles: \nν: true anomaly                                    [rad]\nΩ: pre-explosion longitude of the ascending node   [rad]\nω: pre-explosion argument of periastron            [rad]\ni: pre-explosion inclination                       [rad]\n\nOutput: RTW: check!\n\na_f:   post-explosion orbital separation               [cm]\ne_f:   post-explosion orbital eccentricity             [-]\nΩ_f:   post-explosion longitude of ascending node      [rad]      \nω_f:   post-explosion argument of periastron           [rad]    \ni_f:   post-explosion inclination                      [rad]     \nv_n:   post-explosion systemic velocity, toward N      [rad]\nv_w:   post-explosion systemic velocity, toward W      [rad]      \nv_rad: post-explosion radial velocity, toward O        [rad]      \n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.relative_velocity-Tuple{}","page":"Home","title":"SideKicks.relative_velocity","text":"relative_velocity(;m1, m2, a)\n\nCalculate the relative orbital velocity for a circular orbit.\n\nArguments:\n\nm1: mass of first companion        [g]\nm2: mass of 2nd companion          [g]\na:  semi-major axis of the orbit   [cm]\n\nOutput:\n\nv_rel: the relative velocity [cm/s]\n\n\n\n\n\n","category":"method"},{"location":"#SideKicks.restrictedEjectaBH-Tuple{Any, Any}","page":"Home","title":"SideKicks.restrictedEjectaBH","text":"restrictedEjectaBH(m2_i, frac; Ma=10, Mb=15, max_frac=1.0, min_frac=0.1)\n\n#TODO Description\n\nArguments:\n\n#TODO\n\nm2_i:\nfrac:\nMa=10:\nMb=15:\nmax_frac=1.0:\nmin_frac=0.1:\n\nOutput:\n\n#TODO\n\n\n\n\n\n\n\n","category":"method"}]
}
